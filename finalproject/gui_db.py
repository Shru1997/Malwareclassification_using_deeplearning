from tkinter import *
import os
import numpy
from tkinter import ttk
import tensorflow as tf
import tkinter, tkinter.constants, tkinter.filedialog
import cv2
import numpy as np
import os
from PIL import Image,ImageTk
from tkinter import messagebox
import execnet
import sqlite3
with sqlite3.connect("gui.db") as db:
    cursor=db.cursor()
cursor.execute("CREATE TABLE IF NOT EXISTS user(username TEXT NOT NULL,password TEXT NOT NULL);")
cursor.execute("SELECT * FROM user")
rows=cursor.fetchall()
for row in rows:
    print(row)
db.commit()
db.close()
sroot = Tk()

# sroot.minsize(height=1080,width=720)
sroot.geometry("1080x720")
sroot.title("Splash window")
sroot.configure()
spath = "./malware.jpeg"
simg = ImageTk.PhotoImage(Image.open(spath))
my = Label(sroot,image=simg)
my.image = simg
my.place(x=90,y=50)
# Frame(sroot,height=516,width=5,bg='black').place(x=520,y=0)
lbl1 = Label(sroot,text="WELCOME",font='Timesnewroman 20 ',fg='salmon')
lbl1.config(anchor=CENTER)
lbl1.pack(padx = 100, pady = 300)
print('imp')
from tkinter import font
s=['Adialer.C','Agent.FYI','Allaple.A','Allaple.L','Alueron.gen!J','Autorun.K','C2LOP.gen!g','C2LOP.P','Dialplatform.B','Dontovo.A','Fakerean','Instantaccess','Lolyda.AA1','Lolyda.AA2','Lolyda.AA3','Lolyda.AT','Malex.gen!J','Obfuscator.AD','Rbot!gen','Skintrim.N','Swizzor.gen!E',
'Swizzor.gen!I','VB.AT','Wintrim.BX','Yuner.A','Not malware']
original_data_dir = './malimg_dataset/malimg_paper_dataset_imgs'
def delete1():
    screen2.destroy()
def delete_screen():
    screen.destroy()
def resize_image(event):
    new_width = event.width
    new_height = event.height
    image = copy_of_image.resize((1920, 600))
    photo = ImageTk.PhotoImage(image)
    label.config(image = photo)
    label.image = photo #avoid garbage collection
def get_class_index(predicted_mal_class) : 
  return [np.where(r==1)[0][0] for r in predicted_mal_class][0]
def prepare(filepath):
  IMG_SIZE = 150
  try:
    img_array = cv2.imread(filepath)
    new_array = cv2.resize(img_array, (IMG_SIZE,IMG_SIZE))
  except:
    exit()
  return new_array.reshape(-1, IMG_SIZE, IMG_SIZE, 3)
def predict_mal_from_img(mal_img,pred) :
  import ntpath
  if 'binary_file' in mal_img:
    return s[25]
  class_dir_list = sorted(list(os.listdir(original_data_dir)))
  prepared_mal_img = prepare(mal_img)
  predicted_mal_class = pred.predict([prepared_mal_img])
  intg = get_class_index(predicted_mal_class)
  # head, tail = ntpath.split(mal_img)
  # mal_name = tail or ntpath.basename(mal_img)
  return class_dir_list[intg]
def to_img(mal_path):
  import os
  import imageio
  import array
  import numpy
  f = open(mal_path,'rb')
  ln = os.path.getsize(mal_path)
  width = 512
  rem = ln%width
  a = array.array("B")
  a.fromfile(f,ln-rem)
  f.close()
  g = numpy.reshape(a,(int(len(a)/width),width))
  g = numpy.uint8(g)  
  img_path = mal_path+'.png'
  imageio.imwrite(img_path,g)
  return img_path
def web():
   rofilename = tkinter.filedialog.askopenfilename(initialdir = "/",title = "Select file",filetypes = (("png files","*.png"),("all files","*.*")))
   print (rofilename)
   pred=tf.keras.models.load_model('./malimg_model.h5')
   result=predict_mal_from_img(rofilename,pred)
  # result=pred.predict(rofilename)
   print (result)
  #  res.config(text="Predicted Class for image is %s" %result)
   result_image(result,rofilename)  
def result_image(result,rofilename):
  root2=Toplevel()
  root2.title("Predicted result for image")
  root2.geometry('1080x720')
  global frame2
  frame2=Frame(root2, relief=RIDGE, borderwidth=2)
  frame2.pack(fill=BOTH,expand=1)
  frame2.config(background='light blue')
  res2=Label(frame2)
  res2.place(x=320,y=120)
  image=Image.open(rofilename)
  image=image.resize((280,280))
  simg=ImageTk.PhotoImage(image)
  my=Label(frame2,image=simg)
  my.image=simg
  my.place(x=570,y=400)
  res2.config(text="predicted class for uploaded image is %s" %result,width='50',height='3',font=("Calibri",24),bg='salmon')
  res7=Label(frame2)
  res7.place(x=320,y=280)
  res7.config(text='The selected image is:',width='50',height='3',font=("Calibri",24),bg='salmon')
  
def result_exe(result):
  root3=Toplevel()
  root3.title("Predicted result for exe")
  root3.geometry('1080x720')
  global frame3
  frame3=Frame(root3, relief=RIDGE, borderwidth=2)
  frame3.pack(fill=BOTH,expand=1)
  frame3.config(background='light blue')
  res3=Label(frame3)
  res3.place(x=320,y=120)
  res3.config(text="predicted class for uploaded exe is %s" %result,width='50',height='3',font=("Calibri",24),bg='salmon')
def exe():
   rofilename = tkinter.filedialog.askopenfilename(initialdir = "/",title = "Select file",filetypes = (("exe files","*.exe"),("all files","*.*")))
   class_dir_list = list(os.listdir(original_data_dir)).sort()
   pred=tf.keras.models.load_model('./malimg_model.h5')
   mal_img = to_img(rofilename)
   result=predict_mal_from_img(mal_img,pred)
   print(result)
  #  res=Label(frame)
  #  res.place(x=520,y=734)
  #  res1.config(text="Predicted class for exe is %s" %result)  
   result_exe(result)
def delete2():
  screen3.destroy()

def delete3():
  screen4.destroy()

def delete4():
  screen5.destroy()
def delete8():
  screen8.destroy()
  
def login_sucess():
  # global screen3
  # screen3 = Toplevel(screen)
  # screen3.title("Success")
  # screen3.geometry("150x100")
  # Label(screen3, text = "Login Sucess").pack()
  # Button(screen3, text = "OK", command =delete2).pack()
  root=Toplevel()
  root.title("Malware classification using deep learning")
  root.geometry('720x720')
  global frame
  frame=Frame(root, relief=RIDGE, borderwidth=2)
  frame.pack(fill=BOTH,expand=1)
  frame.config(background='light blue')
  global label 
  label= Label(frame, text="Malware Classifier",bg='light blue',font=('Times 35 bold'))
  image = Image.open('./a1.jpeg')
  global copy_of_image 
  copy_of_image = image.copy()
  photo = ImageTk.PhotoImage(image,format="gif -index 2")
  #label = ttk.Label(root, image = photo)
  label.bind('<Configure>', resize_image)
  label.pack(fill=BOTH, expand = YES)
  global but1
  but1=Button(frame,padx=5,pady=5,width=39,bg='white',fg='black',relief=GROOVE,command=web,text='Upload Image',font=('helvetica 15 bold'))
  # but1.place(x=120,y=54)
  but1.place(x=520,y=320)
  global but2
  but2=Button(frame,padx=5,pady=5,width=39,bg='white',fg='black',relief=GROOVE,command=exe,text='Upload an .exe file',font=('helvetica 15 bold'))
  # but2.place(x=920,y=54)
  but2.place(x=520,y=420)
  # global res
  # res=Label(frame)
  # res.place(x=520,y=734)
  # global res1
  # res1=Label(frame)
  # res1.place(x=820,y=734)
  root.mainloop()
  
def password_not_recognised():
  global screen4
  screen4 = Toplevel(screen)
  screen4.title("Error")
  screen4.geometry('1080x720')
  Label(screen4, text = "Password Error").pack()
  Button(screen4, text = "OK", command =delete3).pack()

def user_not_found():
  global screen5
  screen5 = Toplevel(screen)
  screen5.title("Error")
  screen5.geometry('1080x720')
  Label(screen5, text = "User Not Found").pack()
  Button(screen5, text = "OK", command =delete4).pack()

  
def register_user():
  print("working")
  
  with sqlite3.connect("gui.db") as db:
    cursor=db.cursor()
  insert='INSERT INTO user(username,password) VALUES(?,?)'
  cursor.execute(insert,[(username.get()),(password.get())])
  db.commit()
  Label(screen1, text = "Registration Sucess", fg = "green" ,font = ("calibri", 11)).pack()

def login_verify():
  with sqlite3.connect("gui.db") as db:
    cursor=db.cursor()
  find_user=("SELECT * FROM user WHERE username = ? AND password = ?")
  cursor.execute(find_user,[(username_verify.get()),(password_verify.get())])
  results=cursor.fetchall()
  if results:
      login_sucess()
  else:
      user_not_found()


def admin_not_found():
  global screen8
  screen8 = Toplevel(screen)
  screen8.title("Admin Details")
  screen8.geometry('1080x720')
  Label(screen8, text = "Admin details are found to be incorrect!!.",width='70',font=("Calibri",24),bg='salmon').pack()
  Button(screen8, text = "OK", command =delete8,width=10,height=1,bg='gray50').pack()
def register1():

  global screen1
  screen1 = Toplevel(screen)
  screen1.title("Register")
  screen1.geometry('1080x720')
  
  global username
  global password
  global username_entry
  global password_entry
  username = StringVar()
  password = StringVar()

  Label(screen1, text = "Please enter your details below",width='300',height='2',font=("Calibri",24),bg='salmon').pack()
  Label(screen1, text = "").pack()
  Label(screen1, text = "Username * ",font=("Calibri",14)).pack()
 
  username_entry = Entry(screen1, textvariable = username)
  username_entry.pack()
  Label(screen1, text = "Password * ",font=("Calibri",14)).pack()
  password_entry =  Entry(screen1, textvariable = password)
  password_entry.pack()
  Label(screen1, text = "").pack()
  Button(screen1, text = "Register", width = 10, height = 1, command = register_user).pack()
def register():
  global screen_2
  screen_2 = Toplevel(screen)
  screen_2.title("Admin verification")
  screen_2.geometry('1080x720')
  Label(screen_2, text = "Please enter admin details below ",width='300',height="2",font=("Calibri",24),bg='salmon').pack()
  Label(screen_2, text = "").pack()

  global admin_username_verify
  global admin_password_verify
  
  admin_username_verify = StringVar()
  admin_password_verify = StringVar()

  global admin_username_entry1
  global admin_password_entry1

  Label(screen_2, text = "Admin Username * ",font=("Calibri",14)).pack()
  admin_username_entry1 = Entry(screen_2, textvariable = admin_username_verify)
  admin_username_entry1.pack()
  Label(screen_2, text = "").pack()
  Label(screen_2, text = "Admin Password * ",font=("Calibri",14)).pack()
  admin_password_entry1 = Entry(screen_2, textvariable = admin_password_verify,show='*')
  admin_password_entry1.pack()
  Label(screen_2, text = "").pack()
  Button(screen_2, text = "Verify", width = 10, height = 1,bg='gray50', command = admin_verify).pack()

def admin_verify():
  username1 = admin_username_verify.get()
  print(username1)
  password1 = admin_password_verify.get()
  print(password1)
  admin_username_entry1.delete(0, END)
  admin_password_entry1.delete(0, END)
  list_of_files = os.listdir()
  if username1=='shruthikl622@gmail.com' and 'shruthikl622@gmail.com' in list_of_files:
    file1 = open(username1, "r")
    verify = file1.read().splitlines()
    if password1 in verify:
        # delete1()
        # login_sucess()
        register1()

    else:
        password_not_recognised()
        # admin_not_found()

  else:
        admin_not_found()

def login():
  global screen2
  screen2 = Toplevel(screen)
  screen2.title("Login")
  screen2.geometry('1080x720')
  Label(screen2, text = "Please enter your details below to login",width='300',height="2",font=("Calibri",24),bg='salmon').pack()
  Label(screen2, text = "").pack()

# sroot.minsize(height=1080,width=720)
  global username_verify
  global password_verify
  
  username_verify = StringVar()
  password_verify = StringVar()

  global username_entry1
  global password_entry1

  Label(screen2, text = "Username * ",font=("Calibri",14),justify=RIGHT).pack()
  username_entry1 = Entry(screen2, textvariable = username_verify)
  username_entry1.pack()
  Label(screen2, text = "").pack()
  Label(screen2, text = "Password * ",font=("Calibri",14)).pack()
  password_entry1 = Entry(screen2, textvariable = password_verify,show='*')
  password_entry1.pack()
  Label(screen2, text = "").pack()
  Button(screen2, text = "Login", width = 10, height = 1,bg='gray50', command = login_verify).pack()
  
  
def main_screen():
  global screen
  screen = Tk()
  screen.geometry('1080x720')
  screen.title("Login screen for malware image classification")
  helv36 = font.Font(family='Helvetica',weight='bold')
  spath = "./login_logo_resized.jpg"
  simg = ImageTk.PhotoImage(Image.open(spath))
  my = Label(screen,image=simg)
  my.image = simg
  my.place(x=680,y=100)
  spath1 = "./register.png"
  simg1 = ImageTk.PhotoImage(Image.open(spath1))
  my1 = Label(screen,image=simg1)
  my1.image = simg1
  my1.place(x=680,y=270)
  Label(text = "Login or Register", bg = "salmon", width = "300", height = "2", font = ("Calibri", 24)).pack()
  Label(text = "").pack()
  button1=Button(text = "Login",font=helv36, height = "3", width = "33", command = login,bg="gray50",fg='black')
  button1.place(x=540,y=180)
  Label(text = "").pack()

  button2=Button(text = "Register",font=helv36,height = "3", width = "33", command = register,bg="gray50")
  button2.place(x=540,y=360)
  screen.mainloop()

# main_screen()
def call_main_screen():
    sroot.destroy()
    main_screen()
sroot.after(3000,call_main_screen)
mainloop()
